#!/usr/bin/env sh

# These should probably be left alone
version="20230417.01"
CA="Root"
INTER=false
self="$(basename "${0}")"
dir="$(dirname "$(readlink -f "${0}")")"

# Help!
usage() {
    echo "Usage: ${self} [ options ... ] [COMMAND] [arguments]"
    echo
    echo "Valid options are:"
    echo "  -c <config-file>  Specify the OpenSSL configuration to work with"
    echo "                    (default: ${CONF})"
    echo "  -d <folder>       Specify the folder to work on (default: ${PDIR})"
    echo "                    This folder will hold the Root CA and intermediate"
    echo "                    CAs as sub-folders."
    echo "  -i <intermediate> Work on <intermediate> (instead of the Root CA)"
    echo "  -h                Show this help"
    echo "  -v                Show ${self}'s version: ${version}"
    echo
    echo "Valid commands are:"
    echo "  init              Initialise the specified CA"
    echo "  reinit            Reissue the specified CA (in case of expiry or similar)"
    echo "  sign [<file>]     Sign a supplied *.csr file (use - for STDIN) or \$CSR"
    echo "  list              List all signed certificates with their serial and validity"
    echo "  list-revoked      List all revoked certificates"
    echo "  revoke <serial>   Revoke the certificate matching <serial>"
    echo "  gencrl            Regenerate a CA's CRL"
    echo "  getca             Output the CA certificate"
    echo "  expires <days>    Print certificates that will have been expired after <days>"
    echo "  check <c> <w>     Nagios-style check for expires after <c> or <w> days"
    echo "  metrics           Output Prometheus-style metrics"
    echo "  getcert <serial>  Output the certificate matching <serial>"
    echo "  getchain <serial> Output a certificate chain for <serial>"
    echo "  help              Show this help"
    echo "  version           Show ${self}'s version: ${version}"
}

# Function to check if we need to commit anything
git_check() {
    cd "${PDIR}"
    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo -e '\007\e[31m' >&2
        echo "The working folder (${PDIR}) is part of a git repository!" >&2
        echo "Do *not* forget to check if you need to commit / push anything!" >&2
        echo -e '\e[0m' >&2
        echo "REMEMBER! Post-merging or rebasing CA repositories is more often than not impossible!" >&2
        echo "Go to ${PDIR} *now* to check!" >&2
    fi
}

# Convert OpenSSL's datetime format to Unix time
ssl_unix() {
    timestamp="$(echo "${1}" | awk '{ printf "%04d-%02d-%02d %s\n", $4, (index("JanFebMarAprMayJunJulAugSepOctNovDec",$1)+2)/3, $2, $3}')"
    date -ud "${timestamp}" +'%s' 2> /dev/null || date -juf '%Y-%m-%d %T' "${timestamp}" +'%s' 2> /dev/null
}

# Get configuration from either /etc or /usr/local/etc or git repo
if [ -r "/etc/${self}.conf" ]; then
    . "/etc/${self}.conf"
elif [ -r "/usr/local/etc/${self}.conf" ]; then
    . "/usr/local/etc/${self}.conf"
elif [ -r "${dir}/${self}.conf" ]; then
    . "${dir}/${self}.conf"
fi

# Override configuration (or get it) from $HOME
if [ -r "${HOME}/.${self}.conf" ]; then
    . "${HOME}/.${self}.conf"
elif [ -r "${HOME}/.config/${self}.conf" ]; then
    . "${HOME}/${self}.conf"
elif [ -r "${HOME}/${self}.conf" ]; then
    . "${HOME}/${self}.conf"
fi

# Options
while getopts ":c:d:i:hv" opt; do
    case "${opt}" in
        c)  # OpenSSL config
            CONF="${OPTARG}"
        ;;

        d)  # Working folder
            PDIR="${OPTARG}"
        ;;

        i)  # Intermediate name
            if [ "${OPTARG}" != "Root" ]; then
                CA="${OPTARG}"
                INTER=true
            fi
        ;;

        h)  # HELP!
            usage
            exit
        ;;

        v)  # Version
            echo "${self} ${version}"
            exit
        ;;

        \?) # ?
            echo "Unknown option: -${OPTARG}"
            echo
            usage
            exit 1
        ;;

        :)  # Catch errors
            echo "Option -${OPTARG} requires an argument."
            echo
            usage
            exit 1
        ;;
    esac
done
shift $((${OPTIND} - 1))    # Any non-option arguments are now just $1, $2, etc.

# Commands that don't need a working configuration are executed here
case "${1}" in
    help)
        usage
        exit
    ;;

    version)
        echo "${self} ${version}"
        exit
    ;;

    # We'll save these commands for later
    init |\
    reinit |\
    sign |\
    list |\
    list-revoked |\
    revoke |\
    gencrl |\
    getca |\
    expires |\
    check |\
    metrics |\
    getcert |\
    getchain)
        command="${1}"
    ;;

    *)
        echo "Invalid or empty command: ${1}"
        echo
        usage
        exit 1
    ;;
esac

# Sanity checks
if [ ! -r "${CONF}" ]; then
    echo "${CONF} does not exist or is not readable!"
    exit 2
fi
if [ ! -d "${PDIR}" ]; then
    echo "${PDIR} does not exist or is not a folder!"
    exit 2
fi
if $INTER && [ ! -d "${PDIR}/Root" ]; then
    echo "No Root authority but asked to work on intermediate ${CA}. This is an error."
    exit 2
fi

# Environment and variables, exported for OpenSSL
export CA
export PDIR
export CA_DIR="${PDIR}/${CA}"
export CA_PREF CA_CNTR CA_PROV CA_CITY CA_ORGA CA_UNIT CA_MAIL URL_PRE
export RCA_VAL INT_VAL CRT_VAL CRL_VAL
export CAPWD="$(eval "echo \${CAPWD_${CA}}")" # Get CA's password from environment. This is almost always very insecure!

# Commands
case "${command}" in
    init)   # Initialise the CA
        if [ -f "${CA_DIR}/serial" ]; then
            echo "There's already a CA at ${CA_DIR}"
            exit 2
        fi

        echo "[${self}] Setting up ${CA_DIR}..."
        [ ! -d "${CA_DIR}" ] && mkdir "${CA_DIR}"
        mkdir "${CA_DIR}/crl" "${CA_DIR}/certs" "${CA_DIR}/newcerts" "${CA_DIR}/private"
        chmod go-rwx "${CA_DIR}/private"
        echo '01'> "${CA_DIR}/serial"
        echo '01'> "${CA_DIR}/crlnumber"
        touch "${CA_DIR}/index.txt"
        echo

        echo "[${self}] Creating ${CA} CA..."
        if $INTER; then
            openssl req -config "${CONF}" -newkey rsa:4096 \
                $([ -n "${CAPWD}" ] && echo "-passout env:CAPWD") -out "${PDIR}/Root/certs/${CA}.csr" \
                -outform PEM || exit $?
            echo

            echo "[${self}] ${CA} is an intermediate, signing it..."
            export CA_DIR="${PDIR}/Root"    # Work on Root to sign ${CA}
            openssl ca -batch -extensions v3_ca -config "${CONF}" \
                $([ -n "${CAPWD_Root}" ] && echo "-passin env:CAPWD_Root") -days "${INT_VAL}" \
                -in "${PDIR}/Root/certs/${CA}.csr" -out "${PDIR}/Root/certs/${CA}.crt" || exit $?
            export CA_DIR="${PDIR}/${CA}"
            rm "${PDIR}/Root/certs/${CA}.csr"
            cp "${PDIR}/Root/certs/${CA}.crt" "${CA_DIR}/ca.crt"
            echo
        else
            openssl req -config "${CONF}" -days "${RCA_VAL}" -x509 -newkey rsa:4096 \
                $([ -n "${CAPWD}" ] && echo "-passout env:CAPWD") -out "${CA_DIR}/ca.crt" \
                -outform PEM || exit $?
            echo
        fi
        echo "[${self}] Generating ${CA} CA's CRL"
        openssl ca -config "${CONF}" $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -gencrl \
            -out "${CA_DIR}/crl.pem" || exit $?
        echo
        echo "Done."
        git_check
    ;;

    reinit)
        if [ ! -f "${CA_DIR}/serial" ]; then
            echo "There's no CA at ${CA_DIR}"
            exit 2
        fi

        echo "[${self}] Reissuing ${CA} CA..."
        if $INTER; then
            openssl req -config "${CONF}" -new -key "${CA_DIR}/private/ca-key.pem" \
                $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -out "${PDIR}/Root/certs/${CA}.csr" \
                -outform PEM || exit $?
            echo

            echo "[${self}] Revoking ${CA} CA..."
            export CA_DIR="${PDIR}/Root"    # Work on Root to revoke ${CA}
            serial="$(grep "${CA} CA" "${CA_DIR}/index.txt" | egrep "^V" | cut -f 4)"
            openssl ca -config "${CONF}" $([ -n "${CAPWD_Root}" ] && echo "-passin env:CAPWD_Root") \
                -revoke "${CA_DIR}/newcerts/${serial}.pem" || exit $?
            echo
            echo "[${self}] Generating Root CA's CRL"
            openssl ca -config "${CONF}" $([ -n "${CAPWD_Root}" ] && echo "-passin env:CAPWD_Root") -gencrl \
                -out "${CA_DIR}/crl.pem" || exit $?
            echo

            echo "[${self}] ${CA} is an intermediate, signing it..."
            openssl ca -batch -extensions v3_ca -config "${CONF}" \
                $([ -n "${CAPWD_Root}" ] && echo "-passin env:CAPWD_Root") -days "${INT_VAL}" \
                -in "${PDIR}/Root/certs/${CA}.csr" -out "${PDIR}/Root/certs/${CA}.crt" || exit $?
            export CA_DIR="${PDIR}/${CA}"
            rm "${PDIR}/Root/certs/${CA}.csr"
            cp "${PDIR}/Root/certs/${CA}.crt" "${CA_DIR}/ca.crt"
            echo
        else
            openssl req -config "${CONF}" -days "${RCA_VAL}" -x509 -new -key "${CA_DIR}/private/ca-key.pem" \
                $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -out "${CA_DIR}/ca.crt" -outform PEM ||
                exit $?
            echo
        fi
        echo "[${self}] Generating ${CA} CA's CRL"
        openssl ca -config "${CONF}" $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -gencrl \
            -out "${CA_DIR}/crl.pem" || exit $?
        echo
        echo "Done."
        git_check
    ;;

    sign)   # Sign a supplied CSR
        if [ -z "${2}" ]; then
            if [ -z "${CSR}" ]; then
                echo "No filename given and CSR environment variable is empty" >&2
                exit 2
            fi
            echo "[${self}] Signing request with ${CA} CA..." >&2
            if $INTER; then
                echo "${CSR}" | openssl ca -batch -policy policy_anything -config "${CONF}" \
                    $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -in /dev/stdin > /dev/null || exit $?
            else
                echo "${CSR}" | openssl ca -batch -config "${CONF}" \
                    $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -in /dev/stdin > /dev/null || exit $?
            fi
            echo >&2
            echo "Serial is: $(cat "${CA_DIR}/serial.old")" >&2
            if $INTER; then
                echo "To get the certificate, run: \`${self} -i ${CA} getcert $(cat "${CA_DIR}/serial.old") \`" >&2
            else
                echo "To get the certificate, run: \`${self} getcert $(cat "${CA_DIR}/serial.old") \`" >&2
            fi
            echo >&2
            echo "Done." >&2
        elif [ "${2}" = "-" ]; then
            echo "[${self}] Signing request with ${CA} CA..." >&2
            if $INTER; then
                openssl ca -batch -policy policy_anything -config "${CONF}" \
                    $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -in /dev/stdin || exit $?
            else
                openssl ca -batch -config "${CONF}" \
                    $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -in /dev/stdin || exit $?
            fi
            echo >&2
            echo "Done." >&2
        else
            if [ ! -f "$(dirname "${2}")/$(basename "${2}" .csr).csr" ]; then
                echo "Can't find ${2} or it isn't a CSR"
                exit 2
            fi
            echo "[${self}] Signing ${2} with ${CA} CA..."
            if $INTER; then
                openssl ca -batch -policy policy_anything -config "${CONF}" \
                    $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -in "${2}" \
                    -out "$(dirname "${2}")/$(basename "${2}" .csr).crt" || exit $?
            else
                openssl ca -batch -config "${CONF}" \
                    $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -in "${2}" \
                    -out "$(dirname "${2}")/$(basename "${2}" .csr).crt" || exit $?
            fi
            echo
            echo "Done."
        fi
        git_check
    ;;

    list)
        for s in $(egrep "^V" "${CA_DIR}/index.txt" | cut -f 4); do
            echo -n "${s}  "
            openssl x509 -noout -text -in "${CA_DIR}/newcerts/${s}.pem" | grep "Subject:" | sed \
                's/.*,\ CN=//g;s/\/.*$//g'
            openssl x509 -noout -text -in "${CA_DIR}/newcerts/${s}.pem" | grep -A 2 Validity
            echo
        done
    ;;

    list-revoked)
        egrep "^R" "${CA_DIR}/index.txt" | cut -f 4,6 | sed 's|[[:space:]]/.*/CN=|\ \ |g;s|/.*||g'
    ;;

    revoke)
        if [ ! -f "${CA_DIR}/newcerts/${2}.pem" ]; then
            echo "No such serial: ${2}"
            exit 2
        fi
        cname=$(cat "${CA_DIR}/index.txt" | cut -f 4,6 | sed 's|\t/.*/CN=|\t|g;s|/.*||g' | egrep "^${2}" | cut \
            -f 2)
        echo "[${self}] Revoking serial ${2} (${cname}) by ${CA} CA..."
        openssl ca -config "${CONF}" $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") \
            -revoke "${CA_DIR}/newcerts/${2}.pem" || exit $?
        echo
        echo "[${self}] Generating ${CA} CA's CRL"
        openssl ca -config "${CONF}" $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -gencrl \
            -out "${CA_DIR}/crl.pem" || exit $?
        echo
        echo "Done."
        git_check
    ;;

    gencrl)
        echo "[${self}] Generating ${CA} CA's CRL"
        openssl ca -config "${CONF}" $([ -n "${CAPWD}" ] && echo "-passin env:CAPWD") -gencrl \
            -out "${CA_DIR}/crl.pem" || exit $?
        echo
        echo "Done."
        git_check
    ;;

    getca)
        if [ ! -f "${CA_DIR}/ca.crt" ]; then
            echo "Certificate for ${CA} not found" >&2
            exit 2
        fi
        cat "${CA_DIR}/ca.crt"
    ;;

    expires)
        seconds=$(( 86400 * ${2:-0} ))
        for s in $(egrep "^V" "${CA_DIR}/index.txt" | cut -f 4); do
            cert="${CA_DIR}/newcerts/${s}.pem"
            if ! openssl x509 -noout -checkend ${seconds} -in "${cert}" > /dev/null; then
                email="$(openssl x509 -noout -email -in "${cert}")"
                if [ -z "${email}" ]; then
                    email="$(openssl x509 -noout -email -in "${CA_DIR}/ca.crt")"
                fi
                subject="$(openssl x509 -noout -subject -in "${cert}" | sed 's/^subject=//')"
                enddate="$(openssl x509 -noout -enddate -in "${cert}" | sed 's/^notAfter=//')"
                echo -e "${email}\t${s}\t${subject}\t${enddate}"
            fi
        done
    ;;

    check)
        seconds_crit=$(( 86400 * ${2:-7}))
        seconds_warn=$(( 86400 * ${3:-31}))
        result=0
        critcount=0; critlist=""
        warncount=0; warnlist=""
        if [ ! -r "${CA_DIR}/index.txt" ]; then
            echo "UNKNOWN: Could not read ${CA_DIR}/index.txt."
            exit 3
        fi
        for s in $(cat "${CA_DIR}/index.txt" | egrep "^V" | cut -f 4); do
            cert="${CA_DIR}/newcerts/${s}.pem"
            if [ ! -r "${cert}" ]; then
                echo "UNKNOWN: Could not read ${cert}."
                exit 3
            fi
            if ! openssl x509 -noout -checkend ${seconds_crit} -in "${cert}" > /dev/null; then
                result=2
                critcount=$((${critcount} + 1))
                cn="$(openssl x509 -noout -subject -nameopt multiline -in "${cert}" | \
                  sed -n 's/[[:space:]]*commonName[[:space:]]*=[[:space:]]//p')"
                email="$(openssl x509 -noout -email -in "${cert}")"
                enddate="$(openssl x509 -noout -enddate -in "${cert}" | sed 's/^notAfter=//')"
                critlist="${critlist}\n${s}: ${enddate}: ${cn} (${email})"
            elif ! openssl x509 -noout -checkend ${seconds_warn} -in "${cert}" > /dev/null; then
                [ ! ${result} -eq 2 ] && result=1
                warncount=$((${warncount} + 1))
                cn="$(openssl x509 -noout -subject -nameopt multiline -in "${cert}" | \
                  sed -n 's/[[:space:]]*commonName[[:space:]]*=[[:space:]]//p')"
                email="$(openssl x509 -noout -email -in "${cert}")"
                enddate="$(openssl x509 -noout -enddate -in "${cert}" | sed 's/^notAfter=//')"
                warnlist="${warnlist}\n${s}: ${enddate}: ${cn} (${email})"
            fi
        done
        case ${result} in
            0)
                echo "OK: No certificates are about to expire."
                exit 0
            ;;
            1)
                if [ ${warncount} -eq 1 ]; then
                    echo "WARNING: ${warncount} certificate is about to expire."
                else
                    echo "WARNING: ${warncount} certificates are about to expire."
                fi
                echo -e "${warnlist}"
                exit 1
            ;;
            2)
                totalcount=$((${warncount} + ${critcount}))
                if [ ${totalcount} -eq 1 ]; then
                    echo "CRITICAL: ${totalcount} certificate is about to expire, of which ${critcount} imminently."
                else
                    echo "CRITICAL: ${totalcount} certificates are about to expire, of which ${critcount} imminently."
                fi
                echo -e "${critlist}"
                echo -e "${warnlist}"
                exit 2
            ;;
            *)
                echo "UNKNOWN: unknown error."
                exit 3
            ;;
        esac
    ;;

    metrics)
        echo "# HELP cayman_info Information about Cayman."
        echo "# TYPE cayman_info gauge"
        echo "cayman_info{version=\"${version}\",openssl_version=\"$(openssl version -v | cut -d ' ' -f 2)\",platform=\"$(uname -sm)\"} 1"

        test -r "${CA_DIR}/ca.crt" || exit

        echo "# HELP cayman_valid_from_seconds Time at which the certificate's validity starts, in seconds since Unix epoch."
        echo "# TYPE cayman_valid_from_seconds gauge"
        echo -n "cayman_valid_from_seconds{ca=\"${CA}\",serial=\"$(openssl x509 -noout -serial -in "${CA_DIR}/ca.crt" | sed 's|serial=||')\",common_name=\"$(openssl x509 -noout -subject -in "${CA_DIR}/ca.crt" | sed 's|.*CN\ =\ ||;s|,.*||')\"} "
        ssl_unix "$(openssl x509 -noout -startdate -in "${CA_DIR}/ca.crt" | sed 's/^notBefore=//')"
        for cert in $(egrep "^V" "${CA_DIR}/index.txt" | cut -f 4); do
            echo -n "cayman_valid_from_seconds{ca=\"${CA}\",serial=\"$(openssl x509 -noout -serial -in "${CA_DIR}/newcerts/${cert}.pem" | sed 's|serial=||')\",common_name=\"$(openssl x509 -noout -subject -in "${CA_DIR}/newcerts/${cert}.pem" | sed 's|.*CN\ =\ ||;s|,.*||')\"} "
            ssl_unix "$(openssl x509 -noout -startdate -in "${CA_DIR}/newcerts/${cert}.pem" | sed 's/^notBefore=//')"
        done
        for inter in "${CA_DIR}/certs"/*; do
            inter="$(basename "${inter}" ".crt")";
            grep -r "${inter} CA" "${CA_DIR}/index.txt" | egrep -q "^V" || continue
            for cert in $(egrep "^V" "${PDIR}/${inter}/index.txt" | cut -f 4); do
                echo -n "cayman_valid_from_seconds{ca=\"${inter}\",serial=\"$(openssl x509 -noout -serial -in "${PDIR}/${inter}/newcerts/${cert}.pem" | sed 's|serial=||')\",common_name=\"$(openssl x509 -noout -subject -in "${PDIR}/${inter}/newcerts/${cert}.pem" | sed 's|.*CN\ =\ ||;s|,.*||')\"} "
                ssl_unix "$(openssl x509 -noout -startdate -in "${PDIR}/${inter}/newcerts/${cert}.pem" | sed 's/^notBefore=//')"
            done
        done

        echo "# HELP cayman_expires_at_seconds Time at which the certificate's validity ends, in seconds since Unix epoch."
        echo "# TYPE cayman_expires_at_seconds gauge"
        echo -n "cayman_expires_at_seconds{ca=\"${CA}\",serial=\"00\",common_name=\"$(openssl x509 -noout -subject -in "${CA_DIR}/ca.crt" | sed 's|.*CN\ =\ ||;s|,.*||')\"} "
        ssl_unix "$(openssl x509 -noout -enddate -in "${CA_DIR}/ca.crt" | sed 's/^notAfter=//')"
        for cert in $(egrep "^V" "${CA_DIR}/index.txt" | cut -f 4); do
            echo -n "cayman_expires_at_seconds{ca=\"${CA}\",serial=\"$(openssl x509 -noout -serial -in "${CA_DIR}/newcerts/${cert}.pem" | sed 's|serial=||')\",common_name=\"$(openssl x509 -noout -subject -in "${CA_DIR}/newcerts/${cert}.pem" | sed 's|.*CN\ =\ ||;s|,.*||')\"} "
            ssl_unix "$(openssl x509 -noout -enddate -in "${CA_DIR}/newcerts/${cert}.pem" | sed 's/^notAfter=//')"
        done
        for inter in "${CA_DIR}/certs"/*; do
            inter="$(basename "${inter}" ".crt")";
            grep -r "${inter} CA" "${CA_DIR}/index.txt" | egrep -q "^V" || continue
            for cert in $(egrep "^V" "${PDIR}/${inter}/index.txt" | cut -f 4); do
                echo -n "cayman_expires_at_seconds{ca=\"${inter}\",serial=\"$(openssl x509 -noout -serial -in "${PDIR}/${inter}/newcerts/${cert}.pem" | sed 's|serial=||')\",common_name=\"$(openssl x509 -noout -subject -in "${PDIR}/${inter}/newcerts/${cert}.pem" | sed 's|.*CN\ =\ ||;s|,.*||')\"} "
                ssl_unix "$(openssl x509 -noout -enddate -in "${PDIR}/${inter}/newcerts/${cert}.pem" | sed 's/^notAfter=//')"
            done
        done

        echo "# HELP cayman_valid_certificates_total Number of valid certificates signed by CA."
        echo "# TYPE cayman_valid_certificates_total gauge"
        echo -n "cayman_valid_certificates_seconds{ca=\"${CA}\"} "
        egrep "^V" "${CA_DIR}/index.txt" | wc -l | sed 's|[[:space:]]*||'
        for inter in "${CA_DIR}/certs"/*; do
            inter="$(basename "${inter}" ".crt")";
            grep -r "${inter} CA" "${CA_DIR}/index.txt" | egrep -q "^V" || continue
            echo -n "cayman_valid_certificates_seconds{ca=\"${inter}\"} "
            egrep "^V" "${PDIR}/${inter}/index.txt" | wc -l | sed 's|[[:space:]]*||'
        done

        echo "# HELP cayman_revoked_certificates_total Number of revoked certificates once signed by CA."
        echo "# TYPE cayman_revoked_certificates_total gauge"
        echo -n "cayman_revoked_certificates_seconds{ca=\"${CA}\"} "
        egrep "^R" "${CA_DIR}/index.txt" | wc -l | sed 's|[[:space:]]*||'
        for inter in "${CA_DIR}/certs"/*; do
            inter="$(basename "${inter}" ".crt")";
            grep -r "${inter} CA" "${CA_DIR}/index.txt" | egrep -q "^V" || continue
            echo -n "cayman_revoked_certificates_seconds{ca=\"${inter}\"} "
            egrep "^R" "${PDIR}/${inter}/index.txt" | wc -l | sed 's|[[:space:]]*||'
        done
    ;;

    getcert)
        if [ ! -f "${CA_DIR}/newcerts/${2}.pem" ]; then
            echo "No such serial: ${2}" >&2
            exit 2
        fi
        cat "${CA_DIR}/newcerts/${2}.pem"
    ;;

    getchain)
        openssl x509 -in "${CA_DIR}/newcerts/${2}.pem"
        openssl x509 -in "${CA_DIR}/ca.crt"
        if $INTER; then
            openssl x509 -in "${PDIR}/Root/ca.crt"
        fi
    ;;

    *)
        echo "Invalid or empty command: ${command}"
        echo "How did this even happen?!?"
        echo
        usage
        exit 1
    ;;
esac
